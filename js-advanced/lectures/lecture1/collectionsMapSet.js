///Map и Set. WeakMap и WeakSet
// Для более удобного решения повседневных задач нам иногда может понадобиться весь функционал коллекций. Рассмотрим их подробнее.

///Map
// Map — это коллекция ключ / значение, как и Object. Но основное отличие в том, что Map позволяет использовать ключи любого типа.

// Методы и свойства:
// ● new Map() — создаёт коллекцию
// ● map.set(key, value) — записывает по ключу key значение value
// ● map.get(key) — возвращает значение по ключу или undefined, если ключ key отсутствует
// ● map.has(key) — возвращает true, если ключ key присутствует в коллекции, иначе false
// ● map.delete(key) — удаляет элемент(пару «ключ / значение») по ключу key
// ● map.clear() — очищает коллекцию от всех элементов
// ● map.size — возвращает текущее количество элементов

///Set
// Объект Set — это особый вид коллекции: «множество» значений(без ключей), где каждое значение может появляться только один раз.

// Его основные методы:
// ● new Set(iterable) — создаёт Set, и если в качестве аргумента был предоставлен итерируемый объект(обычно это массив), то копирует его значения в новый Set
// ● set.add(value) — добавляет значение(если оно уже есть, то ничего не делает), возвращает тот же объект set
// ● set.delete(value) — удаляет значение, возвращает true, если value было во множестве на момент вызова, иначе false
// ● set.has(value) — возвращает true, если значение присутствует во множестве, иначе false
// ● set.clear() — удаляет все имеющиеся значения
// ● set.size — возвращает количество элементов во множестве

// Основная «изюминка» — это то, что при повторных вызовах set.add() с одним и тем же значением ничего не происходит, за счёт этого как раз и получается, что каждое значение появляется один раз. Создание Set из массива с повторяющимися элементами также удалит повторные элементы, сделав коллекцию из уникальных элементов. Это самое частое применение коллекции Set.
// Проверим это на практике. Предположим, мы смотрим, какие собачки подбегали к нам взять косточку. Но некоторые собачки хитрые и подбегали несколько раз.

let map = new Map(); // создание коллекции map типа Map

map.set('1', 'str1'); // строка в качестве ключа
map.set(1, 'num1'); // цифра как ключ
map.set(true, 'bool1'); // булево значение как ключ

//Map сохраняет тип ключей, так что в этом случае сохранится 2 разных значения:
console.log(map.get(1)); // "num1"
console.log(map.get("1")); // "str1"
console.log(map.size); // 3

//Методы get, set

let map1 = new Map();

map1.set("1", "We")
    .set(1, "likes")
    .set(true, "JS");

console.log(map1);

// Перебор коллекций Map

let recipeMap = new Map([
    ["огурец", 500],
    ["помидор", 350],
    ["лук", 50]
]);

console.log(recipeMap);

// перебор по ключам (овощи)
for (let vegetable of recipeMap.keys()) {
    console.log(vegetable);
}

//перебор по значениям (числа)
for (let amount of recipeMap.values()) {
    console.log(amount);
}

//перебор по элементам в формате [ключ, значение]
for (let entry of recipeMap) { // то же самое что и recipeMap.entries()
    console.log(entry);
}

//выполняем функцию для каждой пары (ключ, значение)
recipeMap.forEach((value, key, map) => {
    console.log(`${key}: ${value}`);
});

//Работа с объектами

//Object.entries поможет создать Map:
let map2 = new Map(Object.entries(obj));
//Object.fromEntries поможет создать объект из Map:
let obj = Object.fromEntries(map);

///Коллекция Set

let buddies = [
    'Тузик',
    'Грелка',
    'Мурзик',
    'Тузик',
    'Жучка',
    'Жгучка',
    'Грелка',
];

let uniqueBuddies = new Set(buddies);

console.log(uniqueBuddies); // выведет коллекцию только с уникальными значения

//Перевести обратно в массив поможет метод Array.from:
let arr = Array.from(uniqueBuddies);
console.log(arr); // выведет в виде массива

///WeakMap и WeakSet
// Кратко рассмотрим «побратимов» Map и Set. Необходимость в их использовании возникает очень редко, поэтому подробнее рассматривать нет смысла. Подробно об их использовании можно посмотреть в документации: WeakMap и WeakSet.
// WeakMap — это Map - подобная коллекция, позволяющая использовать в качестве ключей только объекты, и автоматически удаляющая их вместе с соответствующими значениями, как только они становятся недостижимыми иными путями.
// WeakSet — это Set - подобная коллекция, которая хранит только объекты и удаляет их, как только они становятся недостижимыми иными путями.
// Удаляются объекты автоматически сборщиком мусора. Рассматриваемые коллекции не создают специальных ссылок на эти объекты и не препятствуют их удалению.

// Обе этих структуры данных не поддерживают методы и свойства, работающие со всем содержимым сразу или возвращающие информацию о размере коллекции.
// Возможны только операции на отдельном элементе коллекции.
// WeakMap и WeakSet используются как вспомогательные структуры данных в дополнение к «основному» месту хранения объекта. Если объект удаляется из основного хранилища и нигде не используется, кроме как в качестве ключа в WeakMap или в WeakSet, то он будет удалён автоматически.
