const cook = new Map ([
  ["Пицца", "Олег"],
  ["Суши", "Андрей"],
  ["Десерт", "Анна"],
])

const menu = new Map([
  ["Маргарита", "Пицца \"Маргарита\""],
  ["Пепперони", "Пицца \"Пепперони\""],
  ["Три сыра", "Пицца \"Три сыра\""],
  ["Филадельфия", "Суши \"Филадельфия\""],
  ["Калифорния", "Суши \"Калифорния\""],
  ["Чизмаки", "Суши \"Чизмаки\""],
  ["Сеякемаки", "Суши \"Сеякемаки\""],
  ["Тирамису", "Десерт \"Тирамису\""],
  ["Чизкейк", "Десерт \"Чизкейк\""],
])

// Посетитель ресторана.
class Client {
  constructor(firstname, lastname) {
    this.firstname = firstname;
    this.lastname = lastname;
  }

  getInfo() {
    return Клиент ${this.firstname} ${this.lastname} заказал:
  }
}

// Вам необходимо реализовать класс, который управляет заказами и поварами.
class Manager {
  constructor(cook, menu) {
    this.cook = cook;
    this.menu = menu;
  }

  newOrder (client) {
    console.log(client.getInfo())

    for (let arg = 1; arg < arguments.length; arg++) {
      let dish = this.menu.get(arguments[arg]['name'])
      let quantity = arguments[arg]['quantity']
      let whoCooks = this.cook.get(arguments[arg]['type'])

      if (this.menu.get(arguments[arg]['name'])) {
        console.log(`${dish} - ${quantity}; готовит повар ${whoCooks}`)
      }
      else {
        console.log(`Десерт "${arguments[arg]['name']}" - такого блюда не существует.`)
      }
    }
      console.log()
  }
}

// Можно передать внутрь конструктора что-либо, если необходимо.
const manager = new Manager(cook, menu);