// npm пакетный менеджер для node.js
/// npm устанавливается вместе с node.js
// узнать версию npm, в командной строке набрать: npm -v
/// проект npm - это директория в которой содержится специальный файл package.json
// для инициализации npm проекта необходимо набрать в ком строке: npm init -y, -y - создает проект со значениями по-умолчанию, создастся файл package.json
/// установка библиотеки uuid через npm: > npm install uuid
/// пакеты(библиотеки) npm можно посмотреть на сайте npmjs.com

// const uuid = require('uuid'); // вызов uuid

// const id = uuid.v4();

// console.log(id);

// для запуска скрипта можно ввести: > node npm.js или
// в файле package.json в разделе скрипт прописать команду для запуска нашего проетка: "start": "node ./npm.js" и обратиться к проекту по ключу "start": > npm run start

///node_modules - это каталог в вашем проекте npm, в котором хранятся все
// установленные пакеты и их зависимости
// Когда вы устанавливаете пакет с помощью NPM, он скачивается из npm
// registry и код пакета размещается в каталоге node_modules
//директория node_modules должна быть добавлена в gitignore

/// Установка зависимостей
//1й способ > npm install - устанавливает все зависимости, которые указаны в package.json, а также обновляет пакеты
//2й способ > npm ci - также устанавливет все зависимости, при этом пакеты не обновляются

///Удаление пакетов, есть два способа:
// npm uninstall < имя_пакета > - удаляет код указанного пакета из node_modules, а также упоминание этого пакета в package.json
// Также можно удалить в package.json строку с названием и версией пакета, а затем запустить команду npm ci или npm install

///package-lock.json - это специальный файл, который создается и обновляется автоматически при установке или обновлении пакетов npm.
// package - lock.json нужен для того, чтобы гарантировать, что вы и другие разработчики, работающие с вашим проектом, используете одинаковые версии пакетов и зависимостей

///dependencies и devDependencies
//Чем отличается dependencies от devDependencies
//dependencies - это зависимости, которые необходимы для работы вашего кода в продакшене.
//Установка пакетов осуществляется с помощью npm install < имя - пакета >
//devDependencies - это зависимости, которые необходимы только для разработки вашего кода.
// Установка осуществляется с помощью npm install -D < имя - пакета >

///Создание и публикация собственного пакета
//Экспорт из модулей в Node.js
//Экспорт функций и переменных в node.js позволяет использовать их в других файлах или модулях, позволяя повторно использовать код и упрощая отладку и поддержку приложения.
//Для экспорта функций и переменных в node.js нужно использовать объект module.exports

//Пример экспорта из модуля
//Файл first-module.js
// function sayHello() {
//     console.log('Hello!');
// }

// module.exports = { sayHello };

//Файл second-module.js

const firstModule = require('./hello.js');
firstModule.sayHello();
firstModule.conr;


///Подготавливаем проект
// Чтобы подготовить проект к публикации, необходимо выполнить несколько шагов:
// ● Инициализация проекта NPM
// ● Написание кода проекта
// ● Написание файла README.md
// ● Указание стартового файла проекта в package.json
// ● Добавление описания проекта в package.json

/// Чтобы разместить свой проект на npm
//нужно там зарегистрироваться
//залогинится: > npm login
// перейти по ссылке

// npm publish - публикация пакета

///Правила семантического версионирования
//Версии пакетов состоят из трех цифр. Например 2.3.8
// ● Первая цифра - major. Изменяется, когда в проекте реализованы обратно несовместимые изменения
// ● Вторая цифра - minor. Изменяется, когда в проекте добавился функционал и при этом сохранена обратная совместимость
// ● Третья цифра - patch. Изменяется, когда в проекте исправлены ошибки и баги и при этом сохраняется обратная совместимость

// Официальная документация NPM на https://docs.npmjs.com/, где вы найдете подробные инструкции и примеры по использованию NPM и его команд.
// ● Полное описание правил семантического версионирования https://semver.org/lang/ru/


